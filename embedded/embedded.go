// Code generated by go-bindata.
// sources:
// .files/src/.gitignore
// .files/src/license
// .files/src/main.go
// .files/src/cli/parse.tpl.go
// .files/src/conf/config.go
// DO NOT EDIT!

package embedded

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Gitignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x91\x41\x8f\xd4\x30\x0c\x85\xef\xf9\x15\x91\xe6\x02\x2b\xb6\xbe\x73\x84\xe5\x86\x84\xb4\x23\x10\xb7\xca\x4d\x4c\xe3\xdd\x24\x8e\xe2\x74\xcb\xfc\x7b\x92\xcd\x5c\xb8\x3c\xbb\xf6\x93\xdb\xef\xf5\x72\xb9\xd8\xef\xb2\xab\x89\x43\x1e\x96\x5e\xcc\x90\xe5\xc1\x98\xb1\x7b\x3e\x72\xe3\x44\xd6\x63\x43\x53\xd8\x0f\x4f\x2f\x5d\x95\xc8\x4f\xcf\x57\x49\x85\x23\x79\xbb\x71\xc6\x7a\xb3\xe8\xbd\x64\xb5\x1f\x42\x6b\xe5\x33\x40\x16\x4f\x2f\xba\x48\xdd\x01\x0b\xc3\xdc\x2e\xa1\xa5\xf8\xd1\x6c\x07\x47\x0f\xcf\x14\x09\x95\xe6\xb5\x27\x2a\x94\x3d\x65\x77\xb3\x9e\x2b\xb9\x26\xf5\x66\xc6\x8d\x35\x89\x3f\x22\xe9\xb4\xfd\x54\xaa\x6a\xbf\xe5\x37\xae\x92\x13\xe5\x66\x7f\x61\x65\xdc\x86\xa1\x03\xb8\xd7\xc7\x53\x5d\xe5\xd2\xa6\xbd\xdb\xda\x81\xd1\x26\x74\x81\x33\x59\x57\x51\x83\x1d\xd0\x9f\x6c\x27\xb1\xf7\x6f\x3d\xcf\x73\x79\xc1\x37\x5c\x9c\x24\xa0\x0c\x5e\xce\x1c\x05\x3d\x04\x8a\x05\xa8\x56\xa9\x6b\x90\xa6\x45\xda\xf2\x37\x45\x13\x74\xed\xc3\xb5\x27\x32\xf3\xd2\x63\x8b\x3d\xae\x11\xcf\xec\x1e\xef\x39\xfe\xb8\xfe\xb6\x5f\xae\x7d\xfe\x74\x5d\xaf\x1d\xe9\x0e\x9b\x58\x9d\xf1\xe2\x60\x88\xc2\x7f\x9c\x60\x96\x3f\x3c\x2b\x7b\x42\x30\xe5\x75\x07\xd3\x33\x06\x63\xe6\x82\x22\x6a\x63\xa7\x84\xd5\x05\x30\x5a\x1d\xb4\x54\xfa\x2b\x47\xb7\x73\x0b\xc7\xf6\x0e\x32\x9f\x25\x62\xde\xdf\x7f\xc3\xbf\x00\x00\x00\xff\xff\xd5\x61\xe5\x45\xf5\x01\x00\x00")

func GitignoreBytes() ([]byte, error) {
	return bindataRead(
		_Gitignore,
		".gitignore",
	)
}

func Gitignore() (*asset, error) {
	bytes, err := GitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".gitignore", size: 501, mode: os.FileMode(420), modTime: time.Unix(1467404297, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _license = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5a\x4b\x93\xdb\x38\x92\xbe\xeb\x57\x20\x7c\xe9\xaa\x08\x59\xbb\x33\xfb\x8a\xe8\x3e\xa9\x55\x2c\x17\x63\x55\x52\x8d\x28\xd9\xed\x23\x44\x42\x25\xb4\xf9\xd0\x10\x64\xc9\xfa\xf7\xfb\x65\x02\x20\x41\x4a\xe5\xf1\xcc\x65\x0f\x0e\x97\x24\x22\x91\xc8\xc7\x97\x5f\x26\x18\xa5\xb9\x3e\x19\x25\x5e\xda\x7d\xae\x53\xb1\xd4\xa9\x2a\xf1\xf1\xe3\x9b\xf8\xcb\xec\xdf\x27\x93\xed\x53\x24\xe6\x8b\xc5\xfa\xf9\x65\xbe\xfa\x1a\xaf\x3e\x89\x97\xcd\xfa\xd3\x66\xfe\x2c\xe2\x84\xfe\xfc\x1c\x3f\x44\x0f\x62\xb7\x7a\x88\x36\x82\x1e\xdd\x46\x9b\xe7\x44\xac\x1f\xf1\x01\x0f\x44\x8b\x65\xfc\x92\x44\xe2\x65\xf7\xfb\x32\x5e\x08\xfc\x8b\x56\xf8\x78\xf7\x61\xfe\x69\x13\x45\xcf\xd1\x6a\xfb\xe1\x7e\x26\x20\x58\xec\x92\x68\x2a\x36\x11\x24\x3e\xec\x16\xdb\x78\xbd\x12\xeb\x8d\x78\x88\x93\xed\x26\xfe\x7d\x67\x3f\x3f\xf2\x06\x7e\xfb\xc5\x7a\x95\x6c\xe3\xed\x6e\x1b\x25\x58\xb7\x88\x5f\x62\x48\xfb\x25\x21\x5d\xa3\x97\xed\x7c\xb5\x88\x3a\x2d\xba\xcd\x66\x93\xc9\x5f\x66\xe2\x21\x7a\x8c\x57\x31\xc9\x4c\x26\x93\x0f\x8b\xaa\x6c\x6a\xbd\x6f\x1b\x5d\x95\x1f\x44\xa1\x64\x69\x7e\x9d\x4c\xe4\xbd\xd0\xa5\x68\x8e\x4a\xa4\x12\xc6\xa8\x0e\xfc\xb7\x2e\x75\xa3\x65\x2e\xba\x35\x55\x3d\x1d\xfc\x90\x56\x99\x12\xb2\xcc\x44\x56\xa5\x6d\xa1\xca\x46\x92\x58\x91\x69\x63\x9f\x57\x99\x68\xcb\x4c\xd5\x58\xa4\x8d\x98\xbf\xd6\x4a\xd1\x53\x53\x5a\x33\x99\xec\xaf\x36\x55\x32\x3d\x0a\xd3\xee\x8d\xfa\x7b\x8b\xe7\xc2\x8d\xa1\xa4\xbe\x17\xe9\x51\x96\xaf\xca\x88\xa6\xe2\x75\x2f\x75\xf5\x5a\xcb\xc2\xc9\xd3\x78\x40\x66\x99\x26\x1d\xc6\x8f\xfc\x36\x99\x9c\x8f\xaa\x56\x90\x8e\x2d\xbc\x18\x2c\xfb\xb7\xaa\x7e\x77\x91\xa8\x6a\xfd\xaa\x4b\xd9\x28\x71\xa8\xab\x82\x4f\x2a\x21\x23\x3c\xdf\xfe\x82\x15\xb2\x11\x27\x59\x37\x3a\x6d\x73\x59\x87\x5a\xc3\xd9\x22\xb4\xb8\xf8\xa5\x13\x69\x7e\x71\x42\xc3\xe7\x85\x3e\x08\xdd\x88\xb3\x34\xa4\x14\xc4\x8f\x14\xc2\x6e\x7c\x80\xc1\x92\xc6\xa8\xfc\x20\xe8\x1c\xe5\xa5\x2a\xe1\x90\xb4\xd1\xe5\xab\xc0\x6e\xe3\x67\x7f\x31\x62\xaf\x8e\x32\x3f\xcc\x06\x5a\x19\xf8\x4f\x94\x55\x03\x77\xa4\x79\x4b\x2e\x7d\xcf\x20\xe7\xa3\x4e\x8f\xbf\x8a\x3b\xb2\x34\x19\x53\xe1\xd8\x64\x9e\xa2\xca\xda\x1c\x06\x85\x0f\x4d\x75\x68\xce\x63\x2b\xc1\xcf\x69\x55\xfe\xd9\x96\x29\x5b\xe1\xac\x9b\xe3\x40\xae\x8f\x12\xa5\x6b\x51\x9d\x4b\x91\xbb\xac\x94\x83\x90\xc1\xbe\x6e\x63\x52\x16\x2b\xf4\x1b\x02\xee\x4d\x89\x73\x55\x7f\x33\x3e\x6a\x9d\xcc\x59\x18\xec\x55\xed\x62\x9d\x6c\x24\x4e\xaa\x36\xd0\x02\x16\x83\x64\xdd\x38\x0f\xf6\xfa\x9a\xb1\x1c\x07\x12\x99\x78\xc1\x61\xcb\xc6\x08\x2b\x0d\x4e\xa7\x8f\x22\xcd\xa5\x2e\x8c\x53\x5a\xee\x73\x45\x7e\x1a\xfa\x95\x0d\x67\x55\x57\xa9\x32\x46\xd6\x3a\xbf\xc0\x2c\x87\x1a\xae\xf2\x61\xa4\x44\x4b\x79\x50\x0b\x23\x73\xce\x07\xb8\x76\x18\x3e\x32\x27\x07\xb3\x3c\x45\x26\x2d\xf6\xba\xc4\xea\xb1\x3d\x49\x67\xf7\xa7\x3f\x37\xfd\x3a\xf2\xf9\xd0\x3f\x32\x4d\xab\x3a\x93\x65\xaa\xbc\xb8\x30\x65\x49\xe2\x46\xa5\xfa\xa4\xf1\x21\xb0\x25\xa9\x73\x3e\x56\xa2\xc6\xa9\xe0\x09\x73\xd3\xab\xc3\xdc\xb7\x41\x46\x11\x2a\xf3\x01\xb6\x18\x6c\xf2\xd7\x99\x00\xdc\xad\xb6\x04\x66\x9b\xf8\xd3\xd3\x36\x61\x70\x4a\xda\xfd\x9f\x2a\x6d\x7c\x38\x36\xaa\x2e\x9c\xbf\x87\xb2\x19\x40\x42\xbb\x53\xce\xc3\xb6\x50\x87\xdc\xd6\x9d\x00\xde\x29\xab\xf2\xa3\xfa\x0e\x55\x0c\xf4\x9e\x52\x08\xe5\xd9\x59\x67\xf8\xb3\xae\x2e\x32\x6f\x2e\x1f\x0f\x10\x0b\x1b\x9f\x2e\x48\xd9\x63\xd3\xc5\x64\x43\xa7\x3d\xd5\x88\xf8\x14\x0f\x9f\x6a\xca\x01\x75\x2b\x1a\xf1\x23\xd7\x18\x38\x1a\xb6\x3e\xe5\xf2\x12\x7c\x83\x18\x3c\x54\x35\xa0\xab\x77\x03\x87\xb8\xe1\x07\xec\x46\x23\x97\x71\x76\x8d\x32\x7a\x4a\x88\x01\x3f\x4c\xdd\x62\xfc\x3a\xd6\x84\x2c\x8e\xac\x6c\xeb\x54\xf5\x80\x5d\x59\x7b\xf2\x67\xd2\x63\xc6\x70\xfc\xff\x67\x66\x97\x49\xfe\xe8\x36\x72\xae\xd2\x0e\x7a\x15\xf2\x1b\xd6\x22\x4f\xa6\x40\x9f\x3c\x9f\x42\xbd\x03\x05\x59\xe5\x3e\xea\xe2\x54\xd5\x8d\x3d\x23\xce\x50\x9f\x35\x59\x12\x7a\x99\x83\x45\x98\x7f\xc2\xa4\x3f\x63\x37\xb1\x25\xdb\x8c\xd4\x37\x47\x0a\x6d\x79\x3a\xc1\xd1\xce\x96\x36\x57\xa5\xdf\xf4\x4a\x11\x12\x1e\xe6\x8e\x46\xf8\x00\x94\xd8\x0d\xba\xb8\x11\x0c\xda\x97\x08\x07\x1d\x83\x13\xf0\x99\x3c\x8a\xdf\xdc\x2f\x95\xb0\xa1\x71\xe5\x30\xd0\x0d\xea\xee\x49\xdb\x37\x78\xb4\x93\x3d\x76\x04\x9d\xfa\xca\x67\xf6\xd0\x84\xcc\xdd\xc1\x09\x6c\xd9\x0b\xe1\x16\xc6\x81\xa1\x2f\x36\x63\xd5\x66\x62\x55\x89\xa3\xac\x33\xae\x22\xc8\x13\x78\x96\x4e\x9b\x7b\x25\x28\xd8\x38\x40\x10\xb4\xe9\x7d\x10\x6d\xfc\xa5\x69\x60\x4a\x63\x21\x1d\xf1\x75\xac\xda\xd7\xe3\x75\xc0\xba\x48\xa5\xbd\x9d\x5c\x8e\xae\x31\xe0\xc2\x40\xaa\x21\x47\x03\x10\x69\x5b\x5d\x4e\x71\x42\x21\x8d\x69\x6b\x82\x4a\xc3\x90\x0e\x30\x78\xd3\xce\x15\x74\xe4\x70\x23\xd6\x23\x74\x6c\x56\x61\x95\x2d\xb6\x16\xfc\xf9\x57\x67\x4b\x2c\xb0\xf6\xd2\x65\x83\x70\x46\xa8\xb5\xa0\x59\x90\x0f\x33\xa0\x4e\x31\x10\x71\x46\xf6\x96\xb5\x25\x6c\x26\xa2\xf1\x11\x01\x2c\xae\x30\xd1\xc3\xb9\x96\x7b\x9d\x73\xb1\xab\x02\x93\xe1\x68\xbe\x7c\xed\x6b\x32\x55\xe3\x0f\x11\x4a\x17\x7b\x49\x86\xa7\xa8\x73\x4a\x17\xac\xed\xe1\x1f\xe8\x59\xf7\x39\x08\x26\x04\x45\x88\x05\xb8\xa0\x84\x1a\xea\xbb\xaa\x53\x6d\xa8\x14\x90\x0d\xdc\x2a\xca\x84\xce\x27\xec\xa7\xd0\xe7\x0e\x7c\xfa\x13\x38\xe8\x21\x97\x14\x14\xd0\x15\x4a\x67\xad\xcc\x09\xce\xd3\xfd\x89\x8d\x4a\xdb\x5a\x05\x07\xfb\xa1\xe2\xa5\x52\x70\xa7\x07\x82\x99\x78\x24\xaa\xf0\x5d\x16\xa7\x5c\xd9\x2f\x09\x11\xeb\x8c\x49\xdf\x65\x9c\x07\x08\xd5\x1a\xfc\x55\xd7\x96\xbe\x21\x29\xaa\x73\xa0\x2f\xbe\x0a\x20\x7f\xc0\x62\xc1\xfc\x74\x80\x9e\xbf\x98\x1b\x07\x91\x29\x8b\xb6\x71\xe5\xb7\xdc\x2b\xf8\x31\x60\x5c\xde\xa2\x3d\x1d\xc8\xee\xaf\x03\x84\xaa\x98\x32\x16\x58\x39\x4a\x6d\xfc\x7f\x2b\xab\x73\xae\x32\x04\x26\xf4\x39\x4a\xc2\x88\xc3\x41\xa7\xac\x7c\x5f\x0d\x9d\xa5\x00\x91\xe3\x9c\xe9\xf1\x13\x02\xd9\x7f\x0e\x00\xc7\x85\xb4\x4f\x2d\x6e\x03\x46\x74\xe3\x3f\x66\xe8\x73\xfe\xb6\x8b\x37\xdc\xca\x80\x06\xcc\x07\xca\x17\xf2\x02\x1a\x5f\x55\xb6\x20\xdf\xb6\x28\xc9\x1d\x03\xb6\x2b\x2d\xa4\xf4\x3b\x44\xb3\xcb\x66\x32\x8a\xeb\x8d\x48\x00\xbc\xaf\x11\x60\x1d\xd7\xb2\xd5\x91\xa2\xb5\x0b\xea\x1b\xc5\xf2\xb7\xbe\xd7\x69\xcc\xf5\x76\xb6\xad\x51\xa8\x61\x29\x55\x6c\x4b\x15\x5c\x42\x22\x49\x2c\x5b\xe7\x84\x1f\x71\x25\xfe\x02\x08\x49\xf6\xd5\x6a\xac\x07\xb2\xe4\x3b\x39\xd7\x7e\xaf\x59\xf5\x2c\xa4\x5e\xc1\x4a\x42\x80\xe1\x01\x74\x93\xdb\x6a\x47\xc5\x3b\xcc\xf8\x69\x28\xee\x87\x32\x0a\x64\x36\x9a\xac\xc6\x83\x0e\xad\x3b\xe8\xa6\x24\x95\x08\x73\x64\xd8\x30\x9d\xda\xfa\x04\x47\xfe\x66\x5b\xb8\xd0\x18\xcc\x1c\x32\xf5\x33\xb6\xe8\x01\x8e\xe4\x67\xb2\x90\xe8\xf0\xc2\x23\x67\x48\x9b\x94\xf9\xa7\xff\xcb\x9c\x90\x6a\x32\xe7\x87\xe0\x71\x68\x9b\x7b\x3b\xba\x0e\x94\x9a\xdc\x4e\x94\x2d\xaa\x70\x62\x65\x1a\x8a\x12\x9c\xc7\xb0\xce\x50\x1a\x55\xc7\xf6\x0d\x54\x75\xa8\xc5\xa0\x20\x32\x41\xb5\xcb\x34\xf3\x14\x6e\xf9\x86\x11\xc2\x25\x84\x59\x4c\xd0\x4e\x86\xa1\x6e\x49\xbf\xf5\xc7\x08\x9e\x19\x80\x5c\x88\xe9\xb7\xa1\x1a\x21\x75\x39\x54\xf5\x30\x31\x60\xb3\x37\xa9\x73\x6e\x56\x58\xa7\x6b\x16\xc4\xae\x2e\x29\x67\xba\xb8\x85\xe8\x23\xc0\x0c\x09\x57\xed\x1b\xc9\xb9\xcf\xad\x03\xa0\x44\xa2\xa3\x62\x69\x85\x2c\x4b\x68\x66\xfb\xab\xe6\xc8\x45\x05\x4f\x14\x2a\xd3\x6d\x21\xd2\xd6\x34\x55\x61\xbb\x9f\x96\x6a\x0a\x69\xd6\xb5\x8c\x70\x37\x77\xe6\x48\xff\x2f\xd4\xe0\x8c\x54\x2e\x24\xb1\xb0\x4e\xef\x11\x3d\x23\x4d\xbb\x74\x2d\xb0\x0f\x11\x99\xd1\x92\x5b\x1d\x49\x9f\xa1\x92\x41\xea\x3a\x87\x3b\x69\x8e\xb2\xb8\x86\x8b\x0b\x51\xbf\x22\x84\xdb\x41\x74\x12\x54\x91\xe7\x6a\x55\x80\x56\x71\xa3\x9e\x03\x3c\xd8\x8d\x3d\x2a\xe2\x09\x4d\x84\x02\xc1\x47\xa6\x75\x9b\xe8\x72\x24\xf9\x0a\xc5\x59\x37\x8e\x5e\x7d\xb8\xf8\x61\x80\xb4\xd4\xc6\x0f\x1b\xa8\x10\x5f\x77\x93\x03\xa2\x2b\xbd\xe3\x38\x76\x3a\x7f\x5e\x6c\xfd\x32\xe1\x54\xa6\x2b\x50\x96\x32\xf9\xad\xaf\x37\xbc\x62\x76\x93\xc9\x7f\xce\xc4\x62\xfd\xfc\x1c\x6d\x16\xf1\x7c\x39\x18\x78\x91\xd1\x0a\x82\x0d\xce\x39\x8f\xe7\x64\xbf\x70\xa8\x40\xb6\x44\xa7\xaa\x4e\x40\x64\x54\x6c\x8a\xc1\x41\x8d\xec\x10\x9a\xbe\x75\xad\x8c\x42\x20\x23\xd6\x6a\xa4\xf0\x1e\x6d\x08\x63\x10\x25\x0e\x4e\x6b\x3a\xde\x9d\xeb\x6f\xe0\x28\x5f\x8e\x3a\x57\xd6\xfb\x41\x39\x27\xae\x50\xba\x69\xcc\x41\xa6\xb4\x8f\x74\x95\x26\xed\x75\x6e\xfb\xc1\x59\x57\xd1\x47\xc4\x9c\x5b\x65\x17\x44\x66\x5c\xa9\x64\x28\xcc\xf6\x97\x8d\xc5\x05\x42\x2f\x03\x22\x9b\xd3\xa0\x0d\xb6\x18\xf8\xcb\xc1\x8b\x67\x95\x29\x5c\x07\xdd\x4e\x55\xe3\xe0\x6b\x88\x8b\x16\x36\x06\x4d\x37\x71\xf9\x9a\x09\x84\xe3\x36\x83\xe1\xd2\xbf\xa2\xec\xf4\x7a\x48\x75\xf7\x21\xf0\x6e\x38\x96\xb9\xef\x08\x1c\x65\x1b\x47\x54\xa6\x0e\xe4\x32\x8b\x3f\x99\x2a\x4a\x8a\x2e\x85\x86\xe4\x72\xad\x3e\x04\xc7\xee\x19\x2a\x49\x43\xc9\xf2\x15\xf1\x61\x2c\x20\x03\xb4\x0d\x81\xb8\x43\x73\x87\xf3\x06\x31\x7c\x97\x56\x4c\x04\x6d\xc5\xf9\xb0\xe4\x07\x69\x75\x6d\xa9\x29\xc3\xa3\x2d\xc9\x53\x91\xcb\xb3\x69\xb5\x63\xa9\x56\x9b\x5c\xbd\x52\xdd\x48\x6d\xed\x0b\x59\xf4\x80\x25\x7a\x65\xc8\x90\xef\xa8\xec\x7b\x45\xf5\xdd\x8e\x95\x24\x23\xa4\xeb\xc1\xb0\x81\x65\xd4\x85\x36\xc6\x97\x59\x67\xe7\x5b\x96\x75\x33\xb7\x52\x05\x23\x37\x52\xbc\x27\x89\x7d\x67\xf8\xb3\x8e\xb5\x7d\x5f\xb5\xcf\xf5\xab\x6b\xe5\x3c\x73\x33\x6e\x1b\x37\x48\x1c\x74\x80\x9e\xce\xa0\xa1\x67\xdb\x22\x37\x73\x69\x39\xaa\x7d\x40\x5a\x16\xce\xc0\x08\x6b\xf2\x3c\xea\x16\x3b\x0f\xa9\xc8\x0c\x46\xc4\x8a\xcc\xf6\xfe\x7f\xc7\x73\x88\x12\x2a\x5a\xef\x1a\x97\x80\xf2\x57\x81\xf2\x00\x79\xc5\xa9\xc9\x19\x94\x3d\x70\xbd\x6f\xc3\x73\xad\xed\x38\xd5\x59\x9b\x4f\x63\xab\x23\x95\x0c\x66\xf7\x3f\x90\x00\xe5\x08\xd1\xeb\x2a\x9f\xba\x98\xa3\xc3\x50\x8a\x76\x44\xf2\xdd\xbd\x2d\x7e\x70\x3a\x18\x4b\x00\xc8\x5a\x6c\x3d\x9c\x0d\xf4\x19\x3c\x8d\xeb\x53\xa9\x5e\x71\x14\xeb\x12\xeb\xa3\x77\x8d\x20\x2f\x8e\x79\x69\x6a\x5b\xd8\xe3\xe5\x25\x38\x19\x0d\x1d\x3c\x39\x06\x87\xa4\x9d\x01\xdb\x83\x06\x68\x88\x10\x05\x57\xaf\xb0\x99\xff\x79\x98\x78\x71\xdf\xfc\x41\x4a\x8f\x58\x8f\x66\xcc\x29\x79\xb7\x5b\xf6\x41\x00\x1c\x3c\x57\xba\x6d\x79\x5a\x4d\xe3\x22\xe3\x87\x6d\x3c\xdc\xf4\x99\xcc\x25\xea\x40\x25\x20\xe0\xb1\xde\xb6\xf0\x5a\xa7\x1b\x79\x81\xda\x8c\x6b\x21\xec\x92\x90\x83\xfb\xfb\x85\xdb\x1a\x5d\xf7\x73\xcc\xec\x66\x62\xd7\xb3\x12\x97\x47\xd3\x1f\x05\xc6\x99\x2b\xc1\x51\xbe\xa9\x00\x2d\xbd\x46\x01\xca\x5c\x63\x7d\x78\xbe\x9f\x3c\x94\xe3\x81\x07\x76\x65\x5b\x37\xbe\xb7\x35\x01\x0b\x1d\xc5\xfb\x49\x5a\x8a\xda\x41\xad\x61\x86\x68\xda\xbc\xf9\xe1\xb9\x98\xc9\xd0\x62\xab\x9a\x5b\x8e\xe8\xfb\xaf\x99\x58\xad\xc5\x97\xf9\x86\x26\xc3\x5f\xc1\x81\xfe\xa0\x3b\x2f\x31\x4f\x44\xf4\xc7\xcb\x26\x4a\x92\xe5\x57\x91\x44\x5b\xf1\xb8\xde\x6c\x9f\x44\xbc\x1a\x5d\x83\x4d\x07\x17\x69\xe1\x3d\xde\x7a\x25\xe6\x2b\xf1\x01\x82\xe2\xe4\x83\xf8\x7d\x9e\xc4\xc9\x54\x7c\x89\xb7\x4f\xeb\xdd\xd6\xef\x17\x47\x09\xdd\xcd\x2d\xd6\xab\x07\x7b\x89\x46\xa3\x69\xba\xc2\xfb\xdf\x78\xf5\x30\x15\x11\x9e\x8e\x36\x5e\x11\x7a\x32\x7e\x7e\x59\xc6\x10\x1e\xaf\x16\xcb\xdd\x43\xbc\xfa\xd4\x8b\x5c\xc6\xcf\xf1\x76\x4e\x52\xa6\x2c\xe2\x47\x5b\x6c\xe3\xed\x32\x9a\xe2\xe0\xab\x8f\xf1\xea\x71\x03\x39\xee\x30\x44\x9e\x9e\xb0\x6a\xfe\x7b\xbc\x8c\xb7\x5f\x69\xe5\x63\xbc\x5d\xd1\xee\x30\x80\x98\x8b\x97\xf9\x66\x1b\x2f\x76\xcb\xf9\x46\xbc\xec\x36\x2f\xeb\x24\x72\xd3\xa1\x7e\x08\xa1\xed\xa0\x24\xbf\xf4\x11\x99\xdb\x2e\x21\x53\xd4\xd7\xea\xd2\x8f\x10\x80\xe4\x80\xdf\x5a\xd3\x8c\x83\x88\x13\x60\xb0\xe5\xb2\xc8\xd7\x7e\xef\x0c\x1c\x2c\x56\xb9\x89\x0c\x35\x67\x28\xa5\xdf\x28\x10\x4c\x95\x6a\x0e\xc0\xae\x1c\xb9\x19\x10\x53\x27\x37\x53\xb8\x45\xd2\x45\xd8\xc9\x61\x43\xae\x32\xb9\x2e\x74\xd3\x5f\x92\xb9\x4d\xba\xc2\x0e\x89\x27\xa7\x8f\xaa\xeb\x8a\xf8\x9f\xed\xe2\xfb\x4b\x0e\xaa\x53\x3a\xe5\xd6\x80\x2a\xbb\xa7\x07\xdc\xe1\xd4\xcc\x19\x48\x4a\x26\x1b\x39\xf5\xb2\xb8\x90\x51\x0e\x9c\xfa\x8e\xb8\x2d\x5d\x8b\x61\xd3\xba\xb2\xe3\xa5\xba\x6e\x4f\xbe\xca\x5a\xd0\x67\x7c\x9e\x4c\xfe\x7b\x46\xcc\x77\xb1\x9c\xc7\xf0\x25\xf9\x7a\x19\x3b\x67\xfe\x0b\xb1\xbd\x72\x11\xd8\x5d\x0a\x23\x64\x36\x1c\x5d\x88\x27\xcb\xae\xd7\x9b\x44\x24\x4f\xf3\xe5\x52\x3c\xcd\x3f\x47\xfc\x5b\xb7\xa3\x8d\x19\x7c\xf3\x10\x43\x02\xe4\x21\xaa\xbb\xbf\x16\xc8\x12\x04\xda\x72\x2a\x92\x97\x88\x18\x3b\xe2\xfd\x8f\x08\xf1\x3d\xdf\x7c\x9d\xba\x90\x4d\xa2\xbf\xed\xf0\x10\xd3\xf9\xf9\xf3\xfc\x13\x62\xf9\xae\x0b\xfd\x1b\x91\x2f\x96\xeb\x64\x4b\x29\x88\xa0\x4d\xee\xa7\xe2\x69\xfd\x25\xfa\x0c\xfd\x17\xf3\x5d\x82\xac\x99\xaf\x5c\x5a\x7e\xa5\xac\x5d\x6f\xbe\x0e\xec\x83\x54\x7a\x8a\xf8\xb8\xb0\x04\x9f\x6f\x4e\x9a\x52\x17\xb1\xd8\x86\x8f\x41\x37\x1c\x7b\x1b\xaa\xb2\x8a\x3e\x2d\xe3\x4f\x11\xdf\x94\xc3\xea\x24\xe5\x4b\x9c\x44\xf7\x62\xbe\x89\x13\x7a\x20\x5e\xb9\xa4\xc4\x9e\xbb\xad\xbf\x80\x87\x56\xff\xe8\x6e\x7e\x6d\xdf\x05\x80\x69\xd0\xd6\x24\x91\x07\x08\x7b\x7f\x65\xef\xb3\x70\x32\xec\x17\xf1\x8b\x03\x30\xe2\xe7\x68\x25\x62\x3c\xf5\xf0\x39\xa6\x43\x7b\x79\xeb\x24\x89\x7d\x56\x3f\x8a\x64\xb7\x78\xf2\x36\x45\xd4\xfc\xcf\x4c\x40\xfb\x68\x33\x5f\x4e\x26\xf1\x61\x38\x65\xb8\xd1\xb3\x72\xdf\xf2\x06\x5a\x94\x51\x3c\xb6\xa5\xa2\x56\x3e\x55\x41\x1b\x3c\x0c\x7e\x1e\x3f\x06\x33\x7c\x9e\xc2\x70\x5e\xb1\x10\x17\xd7\x9d\x14\x17\xe9\x96\x3f\xa2\xb3\x95\x9a\x65\xba\x2f\xde\xbd\x39\xe2\xe2\xa2\x69\x2a\xdf\x88\x03\xca\x09\x95\x0f\x4b\x9d\x3d\xcf\x65\x76\x42\x83\x06\xb4\x05\x4d\xe5\x5a\x89\xfe\xa0\x56\xc3\x3d\xed\x49\x85\xab\xcf\x7e\xc2\xac\xa2\x2d\x3c\x79\xf6\xd7\xac\x17\x7f\x69\x34\x16\x64\x4d\x43\xfa\x04\x96\x99\xb1\x69\x03\x9c\x44\x2d\xd5\x0d\x5f\x09\x77\x53\xde\xc6\x91\xdf\x41\x7b\xe1\xe6\xe4\x77\xc1\xe5\x26\x5a\x31\xe0\xc7\x47\xcb\xaa\x78\x40\xd6\x12\x28\xd8\xcf\xcc\x8d\x5c\x33\x71\x6f\x69\xaf\xc5\xd0\xd1\x6d\x81\xeb\xe7\xef\xec\x20\x8c\x1e\x19\xdc\xa4\x8c\xf8\x3b\x63\x9a\xad\xc9\x5d\xc7\x4c\xb7\x73\xee\x32\xe5\xbe\x63\xd0\xee\xe2\x27\x1c\x35\xdb\xf3\xdd\x99\xfb\xa9\x65\x4e\x57\x0f\x38\x74\xf6\x13\x79\x1b\x43\x89\xe3\xfd\x7f\xbd\x03\x19\xb6\xbe\xb1\xf5\x83\xc8\xa5\xec\x14\xcc\xe8\x23\x4b\x0c\xec\x87\xc8\x38\xa0\xdd\xce\x60\xf4\x39\xd6\xdd\xd8\xeb\x66\x25\x18\xef\x62\x5f\x99\x38\x00\x7f\x8d\x65\xdb\x05\xf5\x1e\x16\xde\xcb\x2e\x44\x0b\x3c\x5a\x13\xe3\x70\xa1\x79\x35\xf4\x1c\xcd\xe4\xf8\xa5\x16\xdf\x53\xb7\x9e\xd8\xd1\x2e\xf4\x61\x3c\xf4\x02\xba\xeb\x2a\xb3\xc3\xd3\x02\x07\x3f\xd0\x7c\x67\xaf\xa0\x0b\x87\x82\x75\x84\x6b\x20\xca\xaa\xec\xcb\x10\xb3\x58\xf9\x4f\x9c\xbe\x3b\xf7\x34\xbc\x66\xed\x7a\x67\x84\xb1\xb1\xaf\x11\x0c\xeb\xf3\x75\xaf\x47\x83\xfd\x8a\xa2\xd8\x84\xd3\x9e\x53\x4d\xd9\xc8\xa0\x30\x13\x4f\xd5\x99\xda\xee\xe9\x40\xb9\xb0\xfb\xbb\xa9\xa1\xef\x53\xae\xee\x70\x90\xe0\xbd\xca\x61\x0f\x18\xaa\x65\xbd\x4b\x2d\x93\x2e\x5b\x7f\x25\x5e\xbf\xa1\x39\xa7\xe1\x17\x0d\x01\x68\x18\xaa\x99\xd3\xa3\xfa\xbb\xf2\xcf\x53\xb8\xc1\x89\xf9\xc2\x41\xab\x9b\x20\x44\xfc\x41\x07\xdd\xa3\x7c\xab\x34\xf5\x9c\x34\xf7\xc5\x7a\x55\xa6\x16\x8a\x06\x60\xda\x4d\xea\x94\x45\x0d\xea\xa4\xaa\x12\x26\xdb\xf3\xeb\x2f\xb6\xd5\x72\xe3\xba\x43\x45\x6d\x21\x9d\xce\x0e\x69\x6c\x4f\xd6\x8b\x4b\x1a\x85\x90\xc8\x88\x7c\xa9\xda\xbf\x35\x61\xc7\x80\xc4\x9f\xe9\x15\x00\x83\x40\x51\x67\x81\x03\xdb\x66\x3f\x40\x96\x5a\xb9\xd1\xf2\xfd\x8d\xc0\xb5\x03\x66\xbe\x31\xae\xf8\x7f\xbe\x4e\xe5\xb7\x46\x18\x17\x80\x30\xe5\xe8\x70\x5e\x9b\xa3\x1c\x29\xc2\xc7\xba\x8c\xaf\x66\xf8\x2c\xfe\x2d\xba\x47\x80\x5a\xd6\xa5\x73\xf8\x6e\xd8\x95\xfc\x77\x17\xf2\x4c\xcf\x18\xfd\x5a\xba\x62\x72\x7d\x79\x07\x23\xf9\x99\xe6\xb5\xde\xe4\x41\x41\x40\xca\xa9\xd8\xbd\x93\x34\xb8\x18\x0d\x6c\xe9\x13\xa1\x17\x74\xd6\xb6\xa4\xbc\x22\xca\x28\xb1\x29\x88\x60\xe8\x16\x4e\x20\x7b\xfb\x75\x65\x5b\xec\xbd\x2f\x7d\xb8\x06\x6e\x19\xdc\x1b\xdf\xdb\x53\xe5\x67\x79\xa1\x77\xae\x06\x2f\xdb\x98\xe1\x5b\x16\xef\xaa\x65\xb3\xcb\x5d\x96\xdb\x97\xc2\xdc\x6b\x36\x19\x4f\x3f\xfc\xfd\xfe\xd4\xe1\x8d\xfc\xf1\x29\x29\x67\x6c\x64\xd1\x55\xd0\x78\x28\xa0\x72\xa7\xd2\x3b\x57\x69\xc1\x41\xaf\x2e\xc9\xef\xfb\xf7\xb7\x42\x15\x60\xfa\xef\x3c\xa9\x95\xc6\x5f\x47\x21\x5d\xf8\x8a\x82\x33\xc5\xd5\x0e\x83\xe2\x21\xef\x39\xa7\xb8\x8a\xc8\x7d\xf5\x36\x40\xb7\xee\xdd\xa2\xb2\x0a\x6e\x96\xc3\x6b\x7b\x1b\x77\xb7\x46\x46\xee\xaa\x3c\x3c\xed\xed\xb7\x92\xce\x47\x65\x2f\xbc\xbd\xa2\x53\xc2\x2b\xbe\xea\x4a\xa5\xb5\xb2\x32\x4d\x75\x3a\xa9\x7c\x7c\xaf\xcd\xfd\x8d\xbf\x0d\x0d\x6d\x46\xb5\xa3\x3f\xf8\xb0\x70\xde\xb8\x03\x72\x68\x40\xf5\x70\x7b\xc5\xe5\x5e\xe9\x8d\x8c\xb2\x1f\x07\x12\x77\xf0\x3e\x4e\x78\x1c\x8d\x0f\x2b\x18\xff\x6b\x55\x7f\xeb\xa6\xda\xb7\x8d\x12\xae\xdd\x95\xdc\x42\x25\xf6\xe2\x08\x5f\xce\xd1\x9a\xe3\xc8\x0c\x1b\x76\x72\xc9\x06\x1e\xe8\x63\x13\xa6\xb6\x34\x27\x9c\x7f\xde\x3e\x5c\x51\xd9\x0b\xeb\x92\x71\xe8\xa2\x64\xed\x22\xd6\xbe\xfb\xe9\x06\xe7\x4e\x82\x04\x6b\x52\x2e\x6b\xed\xfe\x67\xc9\xde\xa7\xb0\x73\x76\xe6\x8c\xff\xb3\x25\x72\xc7\x35\xdd\x4d\xb1\xec\x8c\x81\xb4\xea\x59\x06\x8c\xf9\x7f\x01\x00\x00\xff\xff\x36\x26\x67\x93\xf2\x2b\x00\x00")

func licenseBytes() ([]byte, error) {
	return bindataRead(
		_license,
		"license",
	)
}

func license() (*asset, error) {
	bytes, err := licenseBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "license", size: 11250, mode: os.FileMode(420), modTime: time.Unix(1467404297, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe2\xca\xcc\x2d\xc8\x2f\x2a\x51\x50\x4a\xcb\x2d\x51\xe2\xe2\x4a\x2b\xcd\x4b\x06\x4b\x68\x68\x2a\x54\x73\x71\x02\x05\xf5\x02\x8a\x32\xf3\x4a\x72\xf2\x34\x94\x3c\x52\x73\x72\xf2\x75\x14\xc2\xf3\x8b\x72\x52\x14\x95\x34\xb9\x6a\xb9\x00\x01\x00\x00\xff\xff\xe9\x0b\x30\x28\x4a\x00\x00\x00")

func mainGoBytes() ([]byte, error) {
	return bindataRead(
		_mainGo,
		"main.go",
	)
}

func mainGo() (*asset, error) {
	bytes, err := mainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.go", size: 74, mode: os.FileMode(420), modTime: time.Unix(1467658000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cliParseTplGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8f\x41\x4f\xc4\x20\x10\x85\xcf\x9d\x5f\x31\xf6\x60\x5a\xb3\xd2\x78\x35\xd9\x83\x51\xaf\x9b\x8d\x7f\xc0\x8c\xec\x80\xb8\x2d\x34\x40\xd5\x84\xf0\xdf\x05\xd6\x44\x2f\xd3\xf4\xbd\x6f\xde\x1b\x56\x92\x67\xd2\x8c\x72\x36\x00\x66\x59\x9d\x8f\x38\x40\xd7\x6b\x13\xdf\xb7\x37\x21\xdd\x32\x7d\x70\x08\xfc\x79\x3a\x4f\xda\xdd\xaa\x99\x74\xe8\x8b\xef\xda\x4c\x09\xc5\x0b\x2f\x2e\x32\xe6\x3c\xd5\xbf\xe3\x25\xef\x40\x4b\x93\xa4\xb3\xaa\x87\x11\x00\xd4\x66\x25\x1e\xc9\x07\x7e\xf0\x3a\x0c\x27\x8a\x84\xc6\x46\xf6\x8a\x24\xa7\x3c\xe2\x4d\x65\xc5\x63\x19\x46\x63\x82\x8e\x0a\x86\xf7\x7b\xbc\xfe\xa7\xa7\x0c\xdd\x5a\x33\x7c\x75\xda\x31\xe2\xc0\x5f\x2d\xd6\x0f\x75\x63\xf7\xab\x3e\xb1\xa2\x6d\x8e\x23\x74\xaf\x3b\x64\xdf\xf8\xcb\xa6\xf8\x3b\xc2\x05\x51\xbf\x05\x32\xaa\x41\x57\x7b\xb4\x66\xae\xed\x5d\xf1\x9e\xbf\x4d\x1c\xee\x8a\x5b\x5a\x3d\xc7\xcd\x5b\xac\x15\x90\xcb\x73\x7e\x02\x00\x00\xff\xff\xbc\xaa\xba\x94\x38\x01\x00\x00")

func cliParseTplGoBytes() ([]byte, error) {
	return bindataRead(
		_cliParseTplGo,
		"cli/parse.tpl.go",
	)
}

func cliParseTplGo() (*asset, error) {
	bytes, err := cliParseTplGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cli/parse.tpl.go", size: 312, mode: os.FileMode(420), modTime: time.Unix(1467663230, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confConfigGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x14\xcc\xb1\x0e\xc2\x30\x0c\x04\xd0\x19\x7f\xc5\x29\x7b\xf9\x80\xae\xec\x4c\x7c\x40\xad\xe0\xa6\x16\x8d\x13\x35\x8e\x04\x42\xfc\x3b\xa9\x74\xc3\xdd\x0d\xaf\x72\x7c\x71\x12\xc4\x62\x2b\x91\x7f\xaa\xe0\x36\xaa\x26\x34\x3f\x7a\x74\x7c\xe9\x72\xe7\x2c\xe7\x54\x4b\x58\xf6\x62\x69\x0e\x36\xae\x80\xa7\xb4\x78\x68\x75\x2d\x36\x87\xc7\xa6\x0d\x23\x6c\x90\x37\xe7\xba\x0b\xa6\x09\x71\x63\x1b\xbc\x3a\x5a\xc9\xe2\xdb\x69\xf4\x26\x6b\xdf\xaf\x61\xa1\x1f\xd1\x3f\x00\x00\xff\xff\xcc\x12\xa0\x6f\x81\x00\x00\x00")

func confConfigGoBytes() ([]byte, error) {
	return bindataRead(
		_confConfigGo,
		"conf/config.go",
	)
}

func confConfigGo() (*asset, error) {
	bytes, err := confConfigGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/config.go", size: 129, mode: os.FileMode(420), modTime: time.Unix(1467587565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".gitignore": Gitignore,
	"license": license,
	"main.go": mainGo,
	"cli/parse.tpl.go": cliParseTplGo,
	"conf/config.go": confConfigGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	".gitignore": &bintree{Gitignore, map[string]*bintree{}},
	"cli": &bintree{nil, map[string]*bintree{
		"parse.tpl.go": &bintree{cliParseTplGo, map[string]*bintree{}},
	}},
	"conf": &bintree{nil, map[string]*bintree{
		"config.go": &bintree{confConfigGo, map[string]*bintree{}},
	}},
	"license": &bintree{license, map[string]*bintree{}},
	"main.go": &bintree{mainGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

